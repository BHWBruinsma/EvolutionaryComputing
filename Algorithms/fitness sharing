// genotype fitness sharing
		// initiate matrixes
		//public double [][] fitness_sharing(int populationsize, int dimension, double [][] arr, double [] fitn) {
		double[][] difference = new double[populationsize][dimension];
		double [] distance = new double [populationsize];
		double[] sharedfitness = new double[populationsize];
		int a = 1;
		double sigmashare = 0.5/Math.pow(10.0,1.0/10.0);
		for (int i = 0; i < populationsize; i++){
			double mi = 0;
			for (int j = 0; j < populationsize; j++){
				double sum = 0;
				for (int k = 0; k < dimension; k++){
					//take the normalized square of the difference
					difference[j][k] = (((arr[i][k] - arr[j][k])/10) * ((arr[i][k] - arr[j][k])/10));
					//System.out.println(difference[j][k]);
				}
				for (int l = 0; l < dimension; l++){
					sum += difference[j][l];
				}
				if (Math.sqrt(sum) <= sigmashare) {
					distance[j] = (1-Math.pow((Math.sqrt(sum)/sigmashare),a));
				}
				else{
					distance[j] = 0;
				}
			}
			for (int m = 0; m < populationsize; m++){
				mi += distance[m];
			}
			sharedfitness[i] = (fitn[i] / mi);
			//System.out.println(sharedfitness[i]);
